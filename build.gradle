plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
}

version "0.1"
group "micronaut.couchbase"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencies {
    // Annotation processing for Micronaut dependency injection
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"

    // Book of dependencies
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")

    // Actual Micronaut components
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    //implementation "io.micronaut:micronaut-http-server-netty"
    //implementation "io.micronaut:micronaut-http-client"

    // Couchbase dependency to new SDK
    implementation 'com.couchbase.client:java-client:3.0.1'
    implementation 'io.projectreactor:reactor-core:3.3.2.RELEASE'

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    //
    // Tests
    //
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "org.assertj:assertj-core:3.11.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    // For docker handling
    testCompile "org.testcontainers:testcontainers:1.12.5"
    testCompile "org.testcontainers:junit-jupiter:1.12.5"

    // For testing Reactor based couchbase api
    testCompile 'io.projectreactor:reactor-test:3.3.2.RELEASE'
}


mainClassName = "micronaut.couchbase.Application"

test {
    useJUnitPlatform()

    // Very verbose logging, don't recommend that on big projects, consider https://github.com/radarsh/gradle-test-logger-plugin
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

